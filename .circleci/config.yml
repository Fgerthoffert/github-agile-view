# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:8.11.4-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          name : Restore NPM Cache
          key: npm-cache-{{ checksum "package.json" }}

      - run:
          name: Download and install meteor
          command: curl https://install.meteor.com | /bin/sh

      #- run:
      #    name: Create Settings File
      #    command: echo $METEOR_SETTINGS > settings.json

      - run:
          name: Install npm dependencies
          command: meteor npm install

      - save_cache:
          name: Save NPM Cache
          key: npm-cache-{{ checksum "package.json" }}
          paths:
            - 'node_modules'

      - run:
          name: Run Linting
          command: meteor npm run lint --silent

      - save_cache:
          key: packages-cache-{{ checksum ".meteor/versions" }}
          paths:
            - './.meteor/local/build'
            - './.meteor/local/bundler-cache'
            - './.meteor/local/isopacks'
            - './.meteor/local/plugin-cache'

  deploy_prod:
      machine:
        enabled: true
      steps:
        - run:
            name: SSH - Remove previous copy of the repo if present
            halt_build_on_fail: false
            command: |
              ssh $SSH_USER@$SSH_HOST "rm ~/zencrepes_prod/ -R"

        - run:
            name: SSH - Clone Repo locally
            command: |
              ssh $SSH_USER@$SSH_HOST "git clone https://github.com/Fgerthoffert/zencrepes.git ~/zencrepes_prod/"

        - run:
            name: SSH - Prepare settings and load environment variable
            command: |
              ssh $SSH_USER@$SSH_HOST bash -c '
                cd ~/zencrepes_prod/
                sed -i "s/GOOGLE_ANALYTICS/$PROD_GOOGLE_ANALYTICS/gi" settings.json
                sed -i "s/METEOR_GITHUB_CLIENTID/$PROD_METEOR_GITHUB_CLIENTID/gi" settings.json
                sed -i "s/METEOR_GITHUB_CLIENTSECRET/$PROD_METEOR_GITHUB_CLIENTSECRET/gi" settings.json
                export PROD_METEOR_SETTINGS=$(cat ./settings.json)'

        - run:
            name: SSH - Build Docker image
            no_output_timeout: 320m
            command: |
              ssh $SSH_USER@$SSH_HOST "cd ~/zencrepes_prod/; docker build -t fgerthoffert/zencrepes ."

        - run:
            name: SSH - Run docker-compose down
            halt_build_on_fail: false
            command: |
              ssh $SSH_USER@$SSH_HOST "cd ~/zencrepes_prod/; docker-compose -f docker-compose_prod.yml down"

        - run:
            name: SSH - Run docker-compose up
            command: |
              ssh $SSH_USER@$SSH_HOST "cd ~/zencrepes_prod/; echo $PROD_METEOR_SETTINGS >> ./METEOR_SETTINGS_prod.log; docker-compose -f docker-compose_prod.yml up -d "

  deploy_dev:
      machine:
        enabled: true
      steps:
        - run:
            name: SSH - Remove previous copy of the repo if present
            halt_build_on_fail: false
            command: |
              ssh $SSH_USER@$SSH_HOST "rm ~/zencrepes_dev/ -R"

        - run:
            name: SSH - Clone Repo locally
            command: |
              ssh $SSH_USER@$SSH_HOST "git clone https://github.com/Fgerthoffert/zencrepes.git ~/zencrepes_dev/"

        - run:
            name: SSH - Moving to develop branch
            command: |
              ssh $SSH_USER@$SSH_HOST "cd ~/zencrepes_dev/; git checkout develop"

        - run:
            name: SSH - Prepare settings and load environment variable
            command: |
              ssh $SSH_USER@$SSH_HOST 'echo $DEV_GOOGLE_ANALYTICS && cd ~/zencrepes_dev/ && sed -i "s/GOOGLE_ANALYTICS/\"$DEV_GOOGLE_ANALYTICS\"/gi" settings.json && sed -i "s/METEOR_GITHUB_CLIENTID/\"$DEV_METEOR_GITHUB_CLIENTID\"/gi" settings.json && sed -i "s/METEOR_GITHUB_CLIENTSECRET/\"$DEV_METEOR_GITHUB_CLIENTSECRET\"/gi" settings.json && export DEV_METEOR_SETTINGS=$(cat ./settings.json)'

        - run:
            name: SSH - Build Docker image
            no_output_timeout: 320m
            command: |
              ssh $SSH_USER@$SSH_HOST "cd ~/zencrepes_dev/; docker build -t fgerthoffert/zencrepes ."

        - run:
            name: SSH - Run docker-compose down
            halt_build_on_fail: false
            command: |
              ssh $SSH_USER@$SSH_HOST "cd ~/zencrepes_dev/; docker-compose -f docker-compose_dev.yml down"

        - run:
            name: SSH - Run docker-compose up
            command: |
              ssh $SSH_USER@$SSH_HOST "cd ~/zencrepes_dev/; echo $DEV_METEOR_SETTINGS >> ./METEOR_SETTINGS_dev.log; docker-compose -f docker-compose_dev.yml up -d"

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy_prod:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy_dev:
          requires:
            - build
          filters:
            branches:
              only: develop
